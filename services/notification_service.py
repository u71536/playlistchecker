import smtplib
import requests
import logging
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, date
import os

logger = logging.getLogger(__name__)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ email, Telegram –∏ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.email_config = {
            'server': os.environ.get('MAIL_SERVER', 'smtp.gmail.com'),
            'port': int(os.environ.get('MAIL_PORT', 587)),
            'use_tls': os.environ.get('MAIL_USE_TLS', 'True').lower() == 'true',
            'username': os.environ.get('MAIL_USERNAME'),
            'password': os.environ.get('MAIL_PASSWORD'),
            'default_sender': os.environ.get('MAIL_DEFAULT_SENDER')
        }
        
        self.telegram_config = {
            'bot_token': os.environ.get('TELEGRAM_BOT_TOKEN'),
            'api_url': 'https://api.telegram.org/bot'
        }
        
        self.webpush_config = {
            'vapid_public_key': os.environ.get('VAPID_PUBLIC_KEY'),
            'vapid_private_key': os.environ.get('VAPID_PRIVATE_KEY'),
            'vapid_email': os.environ.get('VAPID_EMAIL')
        }
    
    def send_email_notification(self, user_email, subject, message,
                                track_name=None, playlist_name=None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        if not all([self.email_config['username'], self.email_config['password']]):
            logger.warning("Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, "
                           "–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É email")
            return False
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            from_address = self.email_config.get('default_sender') or self.email_config.get('username')
            if not from_address or '@' not in from_address:
                logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è. –ó–∞–¥–∞–π—Ç–µ MAIL_DEFAULT_SENDER –∏–ª–∏ MAIL_USERNAME –≤ –≤–∏–¥–µ –ø–æ–ª–Ω–æ–π –ø–æ—á—Ç—ã (example@domain.com)")
                return False

            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = MIMEMultipart('alternative')
            msg['Subject'] = subject
            msg['From'] = from_address
            msg['To'] = user_email
            
            # –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
            text_content = f"""
PlaylistChecker - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

{message}

–ü–ª–µ–π–ª–∏—Å—Ç: {playlist_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
–¢—Ä–µ–∫: {track_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}

---
–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç PlaylistChecker
            """
            
            # HTML –≤–µ—Ä—Å–∏—è
            html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                   color: white; padding: 20px; border-radius: 8px 8px 0 0; text-align: center; }}
        .content {{ background: #f9f9f9; padding: 20px; border-radius: 0 0 8px 8px; }}
        .track-info {{ background: white; padding: 15px; border-radius: 5px; margin: 15px 0; 
                       border-left: 4px solid #667eea; }}
        .footer {{ text-align: center; margin-top: 20px; color: #666; font-size: 12px; }}
        .btn {{ display: inline-block; padding: 10px 20px; background: #667eea; 
                color: white; text-decoration: none; border-radius: 5px; margin: 10px 0; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üéµ PlaylistChecker</h1>
            <p>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞</p>
        </div>
        <div class="content">
            <h2>–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è!</h2>
            <p>{message}</p>
            
            <div class="track-info">
                <strong>üìã –ü–ª–µ–π–ª–∏—Å—Ç:</strong> {playlist_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}<br>
                <strong>üéµ –¢—Ä–µ–∫:</strong> {track_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}<br>
                <strong>üïí –í—Ä–µ–º—è:</strong> {datetime.now().strftime('%d.%m.%Y %H:%M')}
            </div>
            
            <p>–ó–∞–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç PlaylistChecker, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏.</p>
        </div>
        <div class="footer">
            <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç PlaylistChecker</p>
        </div>
    </div>
</body>
</html>
            """
            
            # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            text_part = MIMEText(text_content, 'plain', 'utf-8')
            html_part = MIMEText(html_content, 'html', 'utf-8')
            
            msg.attach(text_part)
            msg.attach(html_part)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
            server = smtplib.SMTP(self.email_config['server'], self.email_config['port'])
            if self.email_config['use_tls']:
                server.starttls()
            
            server.login(self.email_config['username'], self.email_config['password'])
            server.send_message(msg)
            server.quit()
            
            logger.info(f"Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {user_email}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            return False
    
    def send_telegram_notification(self, chat_id, message, track_name=None, playlist_name=None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        if not self.telegram_config['bot_token']:
            logger.warning("Telegram bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram")
            return False
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
            telegram_message = f"""
üéµ *PlaylistChecker - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*

{message}

üìã *–ü–ª–µ–π–ª–∏—Å—Ç:* {playlist_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üéµ *–¢—Ä–µ–∫:* {track_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üïí *–í—Ä–µ–º—è:* {datetime.now().strftime('%d.%m.%Y %H:%M')}
            """
            
            url = f"{self.telegram_config['api_url']}{self.telegram_config['bot_token']}/sendMessage"
            
            payload = {
                'chat_id': chat_id,
                'text': telegram_message,
                'parse_mode': 'Markdown'
            }
            
            response = requests.post(url, json=payload, timeout=10)
            response.raise_for_status()
            
            logger.info(f"Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            return False
    
    def send_browser_notification(self, user_id, title, message, track_name=None, playlist_name=None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä–Ω–æ–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from app import db, User, PushSubscription
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User.query.get(user_id)
            if not user:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            subscriptions = PushSubscription.query.filter_by(user_id=user_id).all()
            if not subscriptions:
                logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö push-–ø–æ–¥–ø–∏—Å–æ–∫")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebPush
            if not all([self.webpush_config['vapid_public_key'], 
                       self.webpush_config['vapid_private_key'],
                       self.webpush_config['vapid_email']]):
                logger.warning("WebPush –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                return False
            
            try:
                from pywebpush import webpush
            except ImportError:
                logger.error("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ pywebpush –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pywebpush")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_payload = {
                'title': title,
                'body': message,
                'icon': '/static/icon-192x192.png',  # –î–æ–±–∞–≤–∏–º –∏–∫–æ–Ω–∫—É –ø–æ–∑–∂–µ
                'badge': '/static/badge-72x72.png',
                'data': {
                    'playlist_name': playlist_name,
                    'track_name': track_name,
                    'timestamp': datetime.now().isoformat(),
                    'url': '/'  # URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                },
                'actions': [
                    {
                        'action': 'view',
                        'title': '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
                        'icon': '/static/view-icon.png'
                    }
                ],
                'requireInteraction': True,
                'tag': f'playlist-{playlist_name}'  # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            }
            
            import json
            payload_json = json.dumps(notification_payload)
            
            success_count = 0
            for subscription in subscriptions:
                try:
                    subscription_info = {
                        'endpoint': subscription.endpoint,
                        'keys': {
                            'p256dh': subscription.p256dh_key,
                            'auth': subscription.auth_key
                        }
                    }
                    
                    webpush(
                        subscription_info=subscription_info,
                        data=payload_json,
                        vapid_private_key=self.webpush_config['vapid_private_key'],
                        vapid_claims={
                            'sub': f"mailto:{self.webpush_config['vapid_email']}"
                        }
                    )
                    
                    success_count += 1
                    logger.info(f"Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
                    
                except Exception as push_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {str(push_error)}")
                    
                    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞, —É–¥–∞–ª—è–µ–º –µ—ë
                    if "410" in str(push_error) or "invalid" in str(push_error).lower():
                        logger.info(f"–£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é push-–ø–æ–¥–ø–∏—Å–∫—É")
                        db.session.delete(subscription)
                        db.session.commit()
            
            return success_count > 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            return False
    
    def check_notification_already_sent(self, user_id, playlist_id, track_service_id, notification_type):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
        from app import NotificationHistory
        
        existing_notification = NotificationHistory.query.filter_by(
            user_id=user_id,
            playlist_id=playlist_id,
            track_service_id=track_service_id,
            notification_type=notification_type
        ).first()
        
        return existing_notification is not None
    
    def save_notification_history(self, user_id, playlist_id, notification_data, sent_via):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        from app import NotificationHistory, db
        
        history = NotificationHistory(
            user_id=user_id,
            playlist_id=playlist_id,
            notification_type=notification_data.get('type', 'track_changed'),
            track_service_id=notification_data.get('track_service_id'),
            track_name=notification_data.get('track_name'),
            artist_name=notification_data.get('artist_name'),
            playlist_name=notification_data.get('playlist_name'),
            message=notification_data.get('message', ''),
            sent_via=sent_via
        )
        
        try:
            db.session.add(history)
            db.session.commit()
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
            db.session.rollback()
            return False

    def send_all_notifications(self, user, notification_data):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        playlist_id = notification_data.get('playlist_id')
        track_service_id = notification_data.get('track_service_id')
        notification_type = notification_data.get('type')
        
        if self.check_notification_already_sent(user.id, playlist_id, track_service_id, notification_type):
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} –æ —Ç—Ä–µ–∫–µ {track_service_id} —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return {
                'email': False,
                'telegram': False,
                'browser': False,
                'skipped': True,
                'reason': 'already_notified'
            }
        
        results = {
            'email': False,
            'telegram': False,
            'browser': False,
            'skipped': False
        }
        
        title = f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ {notification_data.get('playlist_name', '')}"
        message = notification_data.get('message', '')
        track_name = notification_data.get('track_name')
        playlist_name = notification_data.get('playlist_name')
        
        sent_channels = []
        
        # Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if user.email and user.email_notifications_enabled:
            if self.send_email_notification(user.email, title, message, track_name, playlist_name):
                results['email'] = True
                sent_channels.append('email')
        
        # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if hasattr(user, 'telegram_chat_id') and user.telegram_chat_id and user.telegram_notifications_enabled:
            if self.send_telegram_notification(user.telegram_chat_id, message, track_name, playlist_name):
                results['telegram'] = True
                sent_channels.append('telegram')
        
        # –ë—Ä–∞—É–∑–µ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if user.browser_notifications_enabled:
            if self.send_browser_notification(user.id, title, message, track_name, playlist_name):
                results['browser'] = True
                sent_channels.append('browser')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        if sent_channels:
            sent_via = ', '.join(sent_channels)
            playlist_id = notification_data.get('playlist_id')
            self.save_notification_history(user.id, playlist_id, notification_data, sent_via)
        
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {results}")
        return results


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_service = NotificationService()
