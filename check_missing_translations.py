#!/usr/bin/env python3
"""
–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
"""

import re
import os

def check_missing_translations():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–º"""
    
    files = [
        ('translations/ru/LC_MESSAGES/messages.po', '–†—É—Å—Å–∫–∏–π'),
        ('translations/en/LC_MESSAGES/messages.po', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π')
    ]
    
    for file_path, lang_name in files:
        print(f"\n{'='*60}")
        print(f"üîç –ü–†–û–í–ï–†–ö–ê {lang_name.upper()} –ü–ï–†–ï–í–û–î–û–í")
        print(f"{'='*60}")
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ù–∞–π—Ç–∏ –≤—Å–µ –ø—É—Å—Ç—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        pattern = r'#: ([^\n]+)\nmsgid "(.*?)"\nmsgstr ""'
        matches = re.findall(pattern, content, re.MULTILINE)
        
        if matches:
            print(f"\n‚ùå –ù–∞–π–¥–µ–Ω–æ {len(matches)} –ø—É—Å—Ç—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤:")
            print("-" * 60)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∞–π–ª–∞–º
            by_file = {}
            for location, text in matches:
                file_name = location.split(':')[0].split('/')[-1]
                if file_name not in by_file:
                    by_file[file_name] = []
                by_file[file_name].append((location, text))
            
            for file_name, items in by_file.items():
                print(f"\nüìÑ {file_name} ({len(items)} —Å—Ç—Ä–æ–∫):")
                for location, text in items[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                    # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
                    display_text = text[:80] + "..." if len(text) > 80 else text
                    print(f"  ‚Ä¢ {location}: '{display_text}'")
                
                if len(items) > 5:
                    print(f"  ... –∏ –µ—â–µ {len(items) - 5} —Å—Ç—Ä–æ–∫")
        else:
            print(f"\n‚úÖ –í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!")
        
        # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_translations = len(re.findall(r'msgstr "', content))
        empty_translations = len(matches)
        filled_translations = total_translations - empty_translations
        percentage = (filled_translations / total_translations * 100) if total_translations > 0 else 0
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {lang_name}:")
        print(f"  –í—Å–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {total_translations}")
        print(f"  –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: {filled_translations} ({percentage:.1f}%)")
        print(f"  –ü—É—Å—Ç—ã—Ö: {empty_translations} ({100-percentage:.1f}%)")

def check_template_coverage():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –≤ —à–∞–±–ª–æ–Ω–∞—Ö"""
    
    print(f"\n{'='*60}")
    print("üîç –ü–†–û–í–ï–†–ö–ê –ü–û–ö–†–´–¢–ò–Ø –®–ê–ë–õ–û–ù–û–í")
    print(f"{'='*60}")
    
    template_dir = 'templates'
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    patterns = [
        (r'<h[1-6][^>]*>([^<{]+)</h[1-6]>', '–ó–∞–≥–æ–ª–æ–≤–∫–∏'),
        (r'<p[^>]*>([^<{]+)</p>', '–ü–∞—Ä–∞–≥—Ä–∞—Ñ—ã'),
        (r'<li[^>]*>([^<{]+)</li>', '–°–ø–∏—Å–∫–∏'),
        (r'<button[^>]*>([^<{]+)</button>', '–ö–Ω–æ–ø–∫–∏'),
        (r'placeholder="([^"]+)"', '–ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã'),
        (r'title="([^"]+)"', '–ü–æ–¥—Å–∫–∞–∑–∫–∏'),
    ]
    
    for filename in sorted(os.listdir(template_dir)):
        if filename.endswith('.html'):
            filepath = os.path.join(template_dir, filename)
            
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
            
            print(f"\nüìÑ {filename}:")
            
            total_found = 0
            for pattern, pattern_name in patterns:
                matches = re.findall(pattern, content)
                untranslated = []
                
                for match in matches:
                    text = match.strip()
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ
                    if (text and 
                        not text.startswith('{{') and 
                        not text.startswith('{%') and
                        not text.startswith('_') and
                        len(text) > 2 and
                        any(char.isalpha() and char not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' for char in text)):
                        
                        untranslated.append(text)
                
                if untranslated:
                    print(f"  {pattern_name}: {len(untranslated)} –Ω–µ–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö")
                    for text in untranslated[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        display_text = text[:50] + "..." if len(text) > 50 else text
                        print(f"    ‚Ä¢ '{display_text}'")
                    if len(untranslated) > 3:
                        print(f"    ... –∏ –µ—â–µ {len(untranslated) - 3}")
                    total_found += len(untranslated)
            
            if total_found == 0:
                print("  ‚úÖ –í—Å–µ —Ç–µ–∫—Å—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã!")

def show_next_steps():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏"""
    
    print(f"\n{'='*60}")
    print("üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò")
    print(f"{'='*60}")
    
    print("\n1. üîß –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤:")
    print("   ‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –Ω–µ–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —à–∞–±–ª–æ–Ω–∞—Ö")
    print("   ‚Ä¢ –û–±–µ—Ä–Ω–∏—Ç–µ –µ–≥–æ –≤ {{ _('...') }}")
    print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python manage_translations.py full")
    print("   ‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤ .po —Ñ–∞–π–ª–∞—Ö")
    
    print("\n2. üìù –î–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤:")
    print("   ‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ translations/en/LC_MESSAGES/messages.po")
    print("   ‚Ä¢ –ù–∞–π–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ —Å msgstr \"\"")
    print("   ‚Ä¢ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã")
    print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python manage_translations.py compile")
    
    print("\n3. üß™ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python app.py")
    print("   ‚Ä¢ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ —è–∑—ã–∫ —á–µ—Ä–µ–∑ –≥–ª–æ–±—É—Å –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
    print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –æ–±–æ–∏—Ö —è–∑—ã–∫–∞—Ö")
    
    print("\n4. üìä –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:")
    print("   ‚Ä¢ python check_translations.py - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("   ‚Ä¢ python check_missing_translations.py - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")

if __name__ == '__main__':
    check_missing_translations()
    check_template_coverage()
    show_next_steps()
    print(f"\n{'='*60}")
    print("‚úÖ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"{'='*60}")
